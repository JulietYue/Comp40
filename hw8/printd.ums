// Juliet Yue (qyue01), Steven Song (ssong03)
// RPN Calc
// printd.ums
// print module

.section text
.temps r6, r7
.zero r0

//boolean to track if value being printed is a leading zero or not
leading:
.data 0
not_leading:
.data 1

///////////////////////////////////////////////////////////////////////////////

//      PRINT ALL NUMBERS

///////////////////////////////////////////////////////////////////////////////

//print all values on value stack
enter_print_all:
        push r3 on stack r2
        push r4 on stack r2

        r3 := m[r0][numvals]
        r4 := r0 //setup counter to count number of values printed

        //goto print_all

//loop
print_all:
        if (r4 != m[r0][numvals]) goto enter_print_num using r5

        //goto exit_print_all

//reset registers and return
exit_print_all:
        pop r4 off stack r2
        pop r3 off stack r2
        goto r1

///////////////////////////////////////////////////////////////////////////////

//      PRINT ONE NUMBER

///////////////////////////////////////////////////////////////////////////////

//setup print one number
enter_print_num:
        output ">>> "
        push r4 on stack r2 //push counter on stack to be retreived later

        r4 := r4 + 3 //current value is 3 below the stack pointer and counter
        r4 := r4 + r2
        r5 := m[r0][r4]

        if (r5 == r0) goto output_zero using r4

        if (r5 <s r0) goto print_neg using r4

        r3 := r0
        goto build_num

//special case output 0
output_zero:
        output '0'
        goto exit_print_num

//special case output negatives
print_neg:
        output '-'

        r4 := 2147483648
        if (r5 == r4) goto print_max_neg using r4

        //flip number and print digits with leading '-'
        r5 := r5 - 1
        r5 := ~r5
        r3 := r0
        goto build_num

//special case output most negative number
print_max_neg:
        output "2147483648"
        goto exit_print_num

//put each digit on the stack with the more significant digits on top
build_num:
        if (r3 != 32) goto build_num_loop using r4

        r5 := leading
        goto print_num

build_num_loop:
        r3 := r3 + 1

        r4 := r5 mod 10
        push r4 on stack r2 //push least significant digit on stack
        r5 := r5 / 10 //update remaining value to be processed

        goto build_num

//take digits on stack (from build_num) and print them
print_num:
        if (r3 != r0) goto print_num_loop using r4

        goto exit_print_num

//print digits leaving out leading zeros
print_num_loop:
        r3 := r3 - 1
        if (r5 != leading) goto print_one_digit using r4

        if (m[r0][r2] != r0) goto change_lead using r4

        pop stack r2
        goto print_num

//prints digit from stack if not a leading zero
print_one_digit:
        pop r4 off stack r2
        r4 := r4 + '0'
        output r4
        goto print_num

//change state of leading variable and print the current digit
change_lead:
        r5 := not_leading
        goto print_one_digit

//loop back to print_all
exit_print_num:
        output '\n'
        pop r4 off stack r2 //restore counter variable for numvals
        r4 := r4 + 1 //increment counter
        goto print_all
